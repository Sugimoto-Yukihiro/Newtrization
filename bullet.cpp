//==================================================================
//
// バレット処理 [bullet.cpp]
// Auther : 杉本幸宏
//
//==================================================================

#include "main.h"
#include "bullet.h"

#include "game.h"	// ゲーム
#include "debugproc.h"


//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************


//*****************************************************************************
// グローバル変数
//*****************************************************************************


//=============================================================================
// コンストラクタ・デストラクタ
//=============================================================================
CBullet::CBullet()	// コンストラクタ
{
	Init();	// 初期化
}

CBullet::~CBullet()	// デストラクタ
{

}



//=============================================================================
// 初期化処理
// 引数	：	テクスチャのファイル名, 横分割数, 縦分割数, アニメーションのWait値
//=============================================================================
void CBullet::Init(char* pTextureName, int TexDivX, int TexDivY, int AnimWait)
{
	//テクスチャ生成
	if ( pTextureName ) CreateTexture(pTextureName, &m_Texture);

	// メンバ変数の初期化
	m_Texture = NULL;
	m_TexBullet.Init();	// テクスチャの初期化
	m_Position = ZERO_VECTOR2;
	m_Move = ZERO_VECTOR2;
	m_fAttack = 0.0f;
	m_bUse = false;		// false(未使用)で初期化

	// アニメーション情報のセット
	m_TexBullet.SetTexDivideX(TexDivX);	// 分割数（横）
	m_TexBullet.SetTexDivideY(TexDivY);	// 分割数（縦）
	m_TexBullet.SetAnimWait(AnimWait);	// アニメーションの切り替えフレーム値
}



//=============================================================================
// 終了処理
//=============================================================================
void CBullet::Uninit()
{
	// メンバ変数の終了処理
	m_bUse = false;		// false(未使用)にセット
	m_fAttack = 0.0f;
	m_Move = ZERO_VECTOR2;
	m_Position = ZERO_VECTOR2;
	m_TexBullet.Uninit();	// テクスチャの終了処理

	// テクスチャ解放
	ReleaseTexture(m_Texture);
	m_Texture = NULL;	// 解放したのでNULLをセット
}



//=============================================================================
// 更新処理
// 引数	：	ステージの大きさ
//=============================================================================
void CBullet::Update()
{
	// このバレットが使われていないなら終了
	if (!m_bUse) return;

	// アニメーション
	m_TexBullet.UpdateAnimIndex(0, m_TexBullet.GetTexDivideX() * m_TexBullet.GetTexDivideY());	// 最初から最後まで一気にアニメーション

	// 移動を反映
	m_Position += m_Move;

	PrintDebugProc("【バレット座標】X: %f, Y: %f\n", m_Position.x, m_Position.y);

}



//=============================================================================
// 描画処理
// 引数	：	スクロール座標
//=============================================================================
void CBullet::Draw(D3DXVECTOR2 ScrollPos)
{
	// このバレットが使われていないなら終了
	if (!m_bUse) return;

	//------------------- テクスチャ描画
	m_TexBullet.SetTexPos(m_Position - ScrollPos);	// 表示座標のセット
	m_TexBullet.DrawTexture(m_Texture);				// 描画
}



//=============================================================================
// バレットの発射設定
//=============================================================================
bool CBullet::SetBullet(D3DXVECTOR2 Pos, D3DXVECTOR2 Size, D3DXVECTOR2 Move, float Attack, float HP)
{
	// 既に使用中なら失敗を返す
	if (m_bUse) return (false);

	m_Position = Pos;	// 出現させる位置をセット
	m_TexBullet.SetTexSize(Size);	// 描画するサイズをセット
	m_Move = Move;		// 移動量をセット
	m_fAttack = Attack;	// 攻撃力をセット
	m_bUse = true;		// true(使用中)をセット

	// 成功を返す
	return (true);
}

//=============================================================================
// 使用中バレットの解放
//=============================================================================
bool CBullet::UnsetBullet()
{
	// 既に未使用なら失敗を返す
	if (!m_bUse) return (false);

	// 未使用にする
	m_bUse = false;

	// 成功を返す
	return (true);
}