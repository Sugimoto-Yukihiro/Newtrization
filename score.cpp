//=============================================================================
//
// スコア処理 [score.cpp]
// Author : 杉本幸宏
//
//=============================================================================

#include "main.h"
#include "renderer.h"
#include "score.h"

//=============================================================================
// 初期化処理
//=============================================================================
void CScore::Init(char* pTexName, D3DXVECTOR2 TexSize)
{
	m_nScore = 0;	// スコアの初期化

	// テクスチャの初期化
	m_Texture.Init();
	m_Texture.SetTexSize(TexSize);			// サイズを指定
	m_Texture.SetTexDivideX(10);			// 横分割数を指定

	m_Texture.CreateTextureInf(pTexName);	// テクスチャ生成

}

//=============================================================================
// 終了処理
//=============================================================================
void CScore::Uninit()
{
	m_Texture.ReleaseTextureInf();	// テクスチャ解放
}

//=============================================================================
// 更新処理
//=============================================================================
void CScore::Update(int FlameCnt)
{
	if ((FlameCnt % 60) == 0)
	{	// 1秒経過したらスコアを加算
		AddScore(1);
	}

}

//=============================================================================
// 描画処理
// 引数： 描画する座標（最右）
//=============================================================================
void CScore::Draw(D3DXVECTOR2 Pos)
{
	// 現在のスコア値を取得
	int number = m_nScore;

	// 桁数分処理する
	for (int i = 0; i < SCORE_DIGIT; i++)
	{
		// (numberの中で)表示する桁の数字
		int x = 0;
		x = (number % 10);

		// スコアの描画位置を反映
		{
			D3DXVECTOR2 DrawPos;
			DrawPos.x = Pos.x - (m_Texture.GetTexSize().x * i);	// スコアの表示位置X
			DrawPos.y = Pos.y;	// スコアの表示位置Y

			// 描画位置をセット
			m_Texture.SetTexPos(DrawPos);
		}

		// テクスチャ座標を反映
		{
			m_Texture.SetCurrentAnim(x);
		}

		// テクスチャ描画
		m_Texture.DrawTexture();

		// 次の桁へ
		number /= 10;
	}


}

//****************************************************
// 説明		： スコアの加算
// 引数		： 加算する値（減算も可能）
// 戻り値	： void
//****************************************************
void CScore::AddScore(int add)
{
	m_nScore += add;

	// 最大値を超えてるかチェック
	if (m_nScore > SCORE_MAX)
	{
		m_nScore = SCORE_MAX;	// カウントストップ(表示上と、システム内の両方の数値がリセットされてる)
	}

}
